7.1
a) arrays and collections
b) variables, type
c) The enhanced for statement
d) index
e) two-dimensional array
f) for (double number:numbers)
g) an array of Strings called args by convention
h) args.length
i) test
j) ellipsis

7.2
a) False. An array can only store elements of the same type
b) False. Array index must be an integer or an integer expression
c) False. Elements of an array of primitive types won't be modified
d) False. Command line arguments are separated by white space

7.3
a) final int ARRAY_SIZE = 10;
b) double [] fractions = new fractions [ARRY_SIZE];
c) fractions[4]
d) fractions[9] = 1.667;
e) fractions[6] = 3.333;
f) double sum = 0.0;
   for (int x = 0; x < fractions.length; x++)
   {
       sum += fractions[i];
   }

7.4
a) int[][] table = new table [ARRAY_SIZE][ARRAY_SIZE];
b) 9
c) for (int x = 0; x < table.length; x++)
   {
       for (int y = 0; y < table[x].length; y++)
	   {
	       table[x][y] = x + y;
	   }
   }
   
7.5
a) ARRAY_SIZE is a constant and therefore cannot be modified.
   Either line 2 is removed or line 2 is removed and line 1 changed as follows: final int ARRAY_SIZE = 10;
   
b) ArrayIndexOutOfBoundsException
   i < b.length instead of i <= b.length

c) a[1][1] = 5;

7.6
a) p[0], p[1], p[2], p[3]
b) creating
c) row, column
d) m, n, m*n
e) d[3][5]

7.7
a) False. We specify the name of the array and the index of the element within the array
b) False. The array must be instantiated.
c) False. int [] p = new p[100];
d) False. numbers are initialized to zero, by default.
e) False. We can reference each value in the array and sum them manually. As example, we can consider int p [][] = new p[2][2]. We can sum the values as follows: 
int sum = p[0][0] + p[0][1] + p[1][0] + p[1][1];

7.8
a) System.out.print(f[6]);
b) for (int i = 0; i < g.length; i++)
   {
       g[i] = 8;
   }
   
c) double sum = 0.0;
   for ( int i = 0; i < c.length; i++)
   {
       sum += c[i];
   }

d) for (int i = 0; i < a.length; i++)
   {
       b[i] = a[i];
   }
   
e) double smallest = w[0];

   for (int i = 1; i < w.length; i++)
   {
       if ( w[i] < smallest )
	   {
	       smallest = w[i];
	   }
   }
   System.out.println("The smallest is + " + smallet);
   
   double largest = w[0];
   
   for (int i = 1; i < w.length; i++)
   {
       if ( w[i] > largest )
	   {
	       largest = w[i];
	   }
   }
   System.out.println("The largest is + " + largest);
   
7.9
a) int[][] t = new int [2][3];
b) 2 rows
c) 3 columns
d) 6 elements
e) t[0][0], t[0][1], t[0][2]
f) t[0][1], t[1][1]
g) t[0][1] = 0;
h) t[0][0] = 0; t[0][1] = 0; t[0][2] = 0; t[1][0] = 0; t[1][1] = 0; t[1][2] = 0;
i) for (int i = 0; i < t.length; i++)
       for (int j = 0; j < t[i].length; j++)
	       t[i][j] = 0;
j)  Scanner scan = new Scanner (System.in);

	for (int i = 0; i < t.length; i++)
		   for (int j = 0; j < t[i].length; j++)
			   t[i][j] = scan.nextInt();

k)  int smallest = t[0][0];
    
	for (int[] t1: t)
	    for ( int t2: t1 )
		    if (t2 < smallest)
			    smallest = t2;

l)  System.out.printf("%d, %d, %d", t[0][0], t[0][1], t[0][2]);

m) int sum = t[0][2] + t[1][2];

n) System.out.printf("   0    1    2\n");
   System.out.printf("0  %4d %4d %4d", t[0][0], t[0][1], t[0][2]);
   System.out.printf("1  %4d %4d %4d", t[1][0], t[1][1], t[1][2]);
   
7.11
a) int[] counts = new int[10];
b) for (int i = 0; i < bonus.length; i++)
       bonus[i]++;
c) for (int score: bestScores)
   {
      System.out.println(score);
   }
   
   